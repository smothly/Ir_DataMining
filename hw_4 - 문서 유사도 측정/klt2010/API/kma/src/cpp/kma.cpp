/*--------------------------------------------------------------------------
	File-name	: kma.c
	Description	: Example of calling Korean Morph. Analyser
			  Hangul I/O code is KSC-5601-1987
	Written-by	: Kang, Seung-Shik at Kookmin University  2001. 6.
----------------------------------------------------------------------------*/
#include <ctype.h>
#include "../header/ham-kma.h"

/*
	You may ignore following external functions.
	They are used for I/O options and testing of HAM library.
*/
extern int get_sent_or_line(	/* read a sentence from input file */
	FILE *fp,
	unsigned char *sent,
	unsigned char inputmode);
extern void hamout_HAM(	/* output test for HAM internal str. */
	FILE *fp,	/* output file */
	HAM_PMORES p,	/* HAM result for input sentence */
	HAM_PRUNMODE mode);
extern void hamout_token(	/* output test for token-based: SNU tagset */
	FILE *fp,
	HAM_PMORES2 p,
	HAM_PRUNMODE hammode);
extern void hamout_konan(	/* output test for KONAN tagset */
	FILE *fp,
	HAM_PMORES2 p,
	HAM_PRUNMODE hammode);
extern void hamout2tokenList(
	HAM_PMORES p,
	char *toklist,		/* 토큰으로 구분된 출력 결과 */
	char tokendelim);	/* 토큰 구분 문자 */

/*
	Following variable is needed for morph. analysis.
	'HAM_UCHAR' equals to 'unsigned char' ---> 'header/typedefs.h'.
*/
HAM_MORES2	HamOut2;	/* token-based morph. analysis output */

/*
	Set HAM options at the command-line argument.
*/
void usage_coran()
{
	puts("usage: coran [-options] [input.txt] [output.txt]\n");
	puts("    no options & I/O files --> default options applied");
	puts("\t-m: analysis results: default options ( recommended )");
	puts("\t-t: token-based analysis results: S.N.U tag-set");
	puts("\t-k: token-based analysis results: KONAN tag-set\n");
	puts("\t-A: automatic spacing for input sentence");
	puts("\t-a: don't apply typical morph. ambiguity resolution\n");
	puts("\t-x: expand N/P/X/M, V/J/VX stem : token-based result");
	puts("\t-y: expand Hangul+Ascii+.. stem : token-based result\n");
	puts("\t-b: base form of Josa/Eomi for 'A/O', I/EU-missing, ...");
	puts("\t-o: original form of Josa/Eomi for 'A/O', missing, ....\n");
	puts("\t-1: print-out best 1 result only");
	puts("\t-2: print-out best 2 results only");
	puts("\t-3: expand noun-guessing for analysis-failed words");
	puts("\t-4: expand noun-guessing for analysis-O.K.ed words");
	puts("\t-5: print-out all the candidates generated by HAM\n");
	puts("\t-p: analysis output style: (p1 m1) + (p2 m2) + ...");
	puts("\t-/: analysis output style: m1/p1 + m2/p2 + m3/p3 ...");
	puts("\t-+: analysis output style: remove '+' sign bet'n morph.");
	puts("\t-i: analysis output style: remove dicinfo/variant info.\n");
	puts("\t-s: don't echo-back input sentence itself");
	puts("\t-w: don't echo-back input word itself");
	puts("\t-l: input mode: line-by-line --> sentence mark\n");
	puts("    Options may be combined like -ms, -txsw, or -exn");
	puts("    WITH OPTION & NO I/O FILES SPECIFIED --> INTERACTIVE TESTING");
	GOODBYE(YEAR);	/* goodbye message: 'header/ham-kma.h' */
}

/*
	Set I/O types: following 3 types are possible.
		1. stdin & stdout
		2. file input & stdout
		3. file input & file output
*/
int set_iofile_ptr(
	int argc,
	char *argv[],
	FILE **fpin,
	FILE **fpout
) {
	int i=1, nargs=argc;

	if (argc > 1 && argv[1][0] == '-') { i++; nargs--; }

	switch (nargs) {
	case 1:
		if (argc == 1) { usage_coran(); return 1; }
		break;
	case 2:
		*fpin = fopen(argv[i], "r");
		if (!*fpin) { printf("No such file <%s>\n", argv[i]); return 1; }
		break;
	case 3:
		*fpin = fopen(argv[i], "r");
		if (!*fpin) { printf("No such file <%s>\n", argv[i]); return 1; }
		*fpout = fopen(argv[i+1], "r");
		if (*fpout ) {
			fprintf(stderr, "Overwrite output file <%s> ? ", argv[i+1]);
			if (tolower(fgetc(stdin)) != 'y') return 1;
		}
		*fpout = fopen(argv[i+1], "wb");
		break;
	default:
		usage_coran(); return 1;
	}

	return 0;
}

/* printout test for HAM results */
void morph_out_test(
	FILE *fp,
	HAM_PMORES out1,
	HAM_PMORES2 out2,
	HAM_PRUNMODE mode
) {
	switch (mode->outmode) {
	case OUTMODE_HAM:	/* HAM results for HAM internal str */
	case OUTMODE_ALL:	/* HAM results for all candidates */
		hamout_HAM(fp, out1, mode);
		break;
	case OUTMODE_TOKEN:	/* HAM results for SNU tagset */
		hamout_token(fp, out2, mode);
		break;
	case OUTMODE_KONAN:	/* HAM results for KONAN tagset */
		hamout_konan(fp, out2, mode);
		break;
	case OUTMODE_BOTH:	/* HAM results for HAM & SNU-tagset */
		hamout_HAM(fp, out1, mode);
		hamout_token(fp, out2, mode);
		break;
	default:
		hamout_HAM(fp, out1, mode);
		break;
	}
}

void error_message(
	HAM_RUNMODE mode
) {
	fprintf(stderr, "ERROR: cannot load dictionary files in <%s>. Error code %d in <header/err-code.h>\n",
		mode.dicpath, mode.err_code);
	fprintf(stderr, "Directory path for dictionaries should be correctly positioned. Or\n");
	fprintf(stderr, "you should modify <src/coran.c> and <%s>.\n", INI_FILENAME);
	fprintf(stderr, "1. Check or modify the value <DicDirPath> in <%s>.\n", INI_FILENAME);
	fprintf(stderr, "2. Check or modify <src/coran.c> --> function open_HAM() --> argument <%s>\n", INI_FILENAME);
}

/*---------- INTEGRATION GUIDE of HAM to your system -----------*/
/*                                                              */
/* 0. You should include 'header/ham.h'.                        */
/*                                                              */
/* 1. Following variables are required for HAM                  */
/*       char sent[MAX];  --> one Korean sentence               */
/*       HAM_RUNMODE mode;    --> HAM running options           */
/*       HAM_PMORES  hamout1; --> frame-based result of HAM     */
/*       HAM_MORES2 HamOut2;  --> token-based result of HAM     */
/*    'HamOut2' is needed iff token-based results are required. */
/*                                                              */
/* 2. Call 'open_HAM()' before the first call of morph_anal().  */
/*       It's argument is a diretory path of 'hangul.???'.      */
/*       It initializes global var.s and opens dic. files.      */
/*       Return value --- 0(normal), 1(dic.file open failure)   */
/*                                                              */
/* 3. Call 'morph_anal(sent, &HamOut2, &mode)'.                 */
/*       Morph. analyze words in the sentence and confirm       */
/*       output results by 'hamout_HAM()', hamout_token().      */
/*                                                              */
/* 4. Call 'close_HAM()', if morph_anal() is no nonger used.    */
/*                                                              */
/* Only 3 functions are required for integration to appl. system*/
/*        open_HAM(), morph_anal(), close_HAM()                 */
/*                                                              */
/*--------------------------------------------------------------*/
int main(
	int argc,
	char *argv[]
) {
	int flag;	/* temporary variable */
	FILE *fpin=stdin, *fpout=stdout;

	char *optstr=NULL;	/* option string: e.g. "1aC2", "pVc" */
	HAM_RUNMODE mode;	/* HAM running mode: 'header/runmode.h' */

	unsigned char sent[SENTSIZE];	/* input sentence */
	HAM_PMORES	hamout1;	/* frame-based morph. analysis output */

//char toklist[999];

	if (set_iofile_ptr(argc, argv, &fpin, &fpout))
		return 0;	/* I/O files open failed */
	if (argc > 1 && argv[1][0] == '-') optstr = argv[1]+1;

	/*=========================== Initialization ===========================*/
	flag = open_HAM(&mode, optstr, "./hdic/KLT2000.ini");
	if (flag == 1) {
		error_message(mode); return 0;
	} else if (flag == 2)
		fprintf(stderr, "WARNING: file not found --- <KLT2000.ini>\n");
	WELCOME(mode.version);	/* welcome message: 'header/ham-kma.h' */

	/*--------------- MORE INTEGRATION GUIDE OF HAM ----------------*/
	/*  There are 2 types of HAM output structure,                  */
	/*     frame-based(HAM internal) and token-based output.        */
	/*  Decide one of them that fits to your applicatoin program.   */
	/*--------------------------------------------------------------*/
	while (get_sent_or_line(fpin, sent, mode.inputmode)) {
		if (mode.outmode == OUTMODE_HAM || mode.outmode == OUTMODE_ALL)
			hamout1 = morph_anal(sent, NULL, &mode);
		else	/* generate token-based output */
			hamout1 = morph_anal(sent, &HamOut2, &mode);

		morph_out_test(fpout, hamout1, &HamOut2, &mode);
//		hamout2tokenList(hamout1, toklist, '_'); puts(toklist);
	}

	/*=========================== Finalize KMA ===========================*/
	close_HAM();	/* HAM is not used any more */

	if (fpin != stdin) fclose(fpin);
	if (fpout != stdout) fclose(fpout);
	GOODBYE(YEAR);	/* good-bye message: 'header/ham-kma.h' */
	
	return 0;
}
/*--------------------------- end of coran.c --------------------------*/
